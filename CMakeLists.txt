CMAKE_MINIMUM_REQUIRED(VERSION 2.6)


PROJECT(Progression)

SET(SFML_DIR "" CACHE STRING "Base directory for SFML")

IF (WIN32)
	IF (SFML_DIR STREQUAL "")
		SET(SFML_DIR "C:/Libraries/SFML-2.3.2")
	ENDIF()
ELSE()
	IF (SFML_DIR STREQUAL "")
		SET(SFML_DIR "$ENV{HOME}/SFML/include")
	ENDIF()

	IF (APPLE)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
	ELSE()
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
	ENDIF()
ENDIF()

message(STATUS "SFML_DIR: " ${SFML_DIR})

INCLUDE(${CMAKE_SOURCE_DIR}/ProjectFiles.cmake)


SET(LIBS ${LIBS}
  Lua
)

# Currently always making static libs
set(LIBRARY_EXTENSION "${LIBRARY_EXTENSION}-s")

# Determine what type of library (Debug/Release) to build
if (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_BUILD_TYPE Debug)
    set(LIBRARY_EXTENSION "${LIBRARY_EXTENSION}-d")

else(NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_BUILD_TYPE Release)

endif(NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "Debug")

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${SFML_DIR}/include)

ADD_LIBRARY(Progression${LIBRARY_EXTENSION} STATIC ${SOURCE_FILES} ${INCLUDE_FILES})

ADD_EXECUTABLE(Main main.cpp)
TARGET_LINK_LIBRARIES(Main LINK_PUBLIC Progression${LIBRARY_EXTENSION} ${Libs})

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/test/include)

ADD_EXECUTABLE(Test test/testMain.cpp ${TEST_SOURCE_FILES})
TARGET_LINK_LIBRARIES(Test LINK_PUBLIC Progression${LIBRARY_EXTENSION} ${Libs})