#ifndef INCLUDED_DRILLER_ELEMENTS_UNDERGROUND_TILE_ELEMENT_HPP_
#define INCLUDED_DRILLER_ELEMENTS_UNDERGROUND_TILE_ELEMENT_HPP_

#include <Driller/Elements/BaseElement.hpp>

////////////////////////////////////////////////////////////
///
///	\namespace Driller
///
////////////////////////////////////////////////////////////
namespace Driller {
	////////////////////////////////////////////////////////////
	///
	///	\brief	Element that comprises a individual underground tile
	///
	////////////////////////////////////////////////////////////
	class UndergroundTileElement : public BaseElement {
	public:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Constructor
		///	
		///	\param	The column of the tile
		///
		///	\param	The level of the tile
		///
		////////////////////////////////////////////////////////////
		UndergroundTileElement(int _column, int _level);
		////////////////////////////////////////////////////////////
		///
		///	\brief	Destructor
		///	
		////////////////////////////////////////////////////////////
		~UndergroundTileElement(void);


		////////////////////////////////////////////////////////////
		///
		///	\brief	Updates the element 
		///
		///	\param	The elapsed time for the update
		///
		////////////////////////////////////////////////////////////
		void update(float _delta) override;
		////////////////////////////////////////////////////////////
		///
		///	\brief	Handles an event for the element
		///
		///	\param	The event to handle
		///
		///	\return	Whether the event was handled or not
		///
		////////////////////////////////////////////////////////////
		bool handleEvent(const System::Event& _event) override;
		////////////////////////////////////////////////////////////
		///
		///	\brief	Renders the element
		///
		///	\param	The window to draw on
		///
		///	\param	The states to draw with
		///
		////////////////////////////////////////////////////////////
		void render(const Window::Window& _window, Graphics::RenderData _renderData) const override;

		////////////////////////////////////////////////////////////
		///
		///	\brief	Updates the texture of the tile sprite
		///
		///	\param	The new texture id
		///
		////////////////////////////////////////////////////////////
		void updateBackgroundTexture(const System::Vector2f& _textureId);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Clears the tile
		///
		////////////////////////////////////////////////////////////
		void clear(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets the level of the tile
		///
		///	\return The level
		///
		////////////////////////////////////////////////////////////
		int getLevel(void) const;
		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets the column of the tile
		///
		///	\return The column
		///
		////////////////////////////////////////////////////////////
		int getColumn(void) const;

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets whether the tile is clear or not
		///
		///	\return	Whether the tile is clear
		///
		////////////////////////////////////////////////////////////
		bool getIsClear(void) const;

		////////////////////////////////////////////////////////////
		///
		///	\brief	sets whether the tile is clear or not
		///
		///	\param	Whether the tile has a jon queued
		///
		////////////////////////////////////////////////////////////
		void setJobQueuedFlag(bool _flag);
		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets whether the tile has a job queued
		///
		///	\return	Whether the tile has a job queued
		///
		////////////////////////////////////////////////////////////
		bool getJobQueued(void) const;

	private:
		int					m_Level;			///<	The number of levels below the ground
		int					m_Column;			///<	The column relative to the elevator
		unsigned int		m_VAO;				///<	OpenGL VAO handle
		unsigned int		m_VBO;				///<	OpenGL VBO handle

		bool				m_IsClear;			///<	Whether the tile is free to build in
		bool				m_HasJobQueued;		///<	Whether the tile has a job queued on it or not

	};
}

#endif // INCLUDED_DRILLER_ELEMENTS_UNDERGROUND_TILE_ELEMENT_HPP_