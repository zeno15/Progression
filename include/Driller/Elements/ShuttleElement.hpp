#ifndef INCLUDED_DRILLER_ELEMENTS_SHUTTLE_ELEMENT_HPP_
#define INCLUDED_DRILLER_ELEMENTS_SHUTTLE_ELEMENT_HPP_

#include <Driller/Elements/BaseElement.hpp>

#include <Graphics/AnimatedSprite.hpp>

////////////////////////////////////////////////////////////
///
///	\namespace Driller
///
////////////////////////////////////////////////////////////
namespace Driller {

	////////////////////////////////////////////////////////////
	///
	///	\brief	Class to represent shuttle that exchanges economy value and workers
	///
	////////////////////////////////////////////////////////////
	class ShuttleElement : public BaseElement {
	public:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Constructor
		///	
		////////////////////////////////////////////////////////////
		ShuttleElement(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Updates the shuttle 
		///
		///	\param	The elapsed time for the update
		///
		////////////////////////////////////////////////////////////
		void update(float _delta) override;
		////////////////////////////////////////////////////////////
		///
		///	\brief	Handles an event for the shuttle
		///
		///	\param	The event to handle
		///
		///	\return	Whether the event was handled or not
		///
		////////////////////////////////////////////////////////////
		bool handleEvent(const System::Event& _event) override;
		////////////////////////////////////////////////////////////
		///
		///	\brief	Renders the shuttle
		///
		///	\param	The window to draw on
		///
		///	\param	The states to draw with
		///
		////////////////////////////////////////////////////////////
		void render(const Window::Window& _window, Graphics::RenderData _renderData) const override;

		////////////////////////////////////////////////////////////
		///
		///	\brief	Resets the shuttle for another arrival
		///
		////////////////////////////////////////////////////////////
		void resetForArrival(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets whether the shuttle has completed its departure
		///
		///	\return	Whether it has been completed
		///
		////////////////////////////////////////////////////////////
		bool hasFinishedDeparture(void);

	private:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Whether the shuttle can leave
		///
		///	\return Can leave
		///
		////////////////////////////////////////////////////////////
		bool canLeave(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Called when the shuttle lands for the first time
		///
		////////////////////////////////////////////////////////////
		void onFirstLanding(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Creates a worker at the landing position
		///
		////////////////////////////////////////////////////////////
		void createWorker(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Buys all the ore the mining operation has
		///
		////////////////////////////////////////////////////////////
		void buyOre(void);

	private:
		Graphics::AnimatedSprite			m_Graphics;				///<	The shuttle graphics
		bool								m_GoingToLanding;		///<	Whether the shuttle is incoming
		bool								m_Landed;				///<	Whether the shuttle has landed
		bool								m_GoingToDeparture;		///<	Whether the shuttle is outgoing
		bool								m_Complete;				///<	Whether the shuttle has completed its trip
		bool								m_FirstLanding;			///<	Whether this is the shuttles first landing

		float								m_LandedTime;
	};
}

#endif // INCLUDED_DRILLER_ELEMENTS_SHUTTLE_ELEMENT_HPP_