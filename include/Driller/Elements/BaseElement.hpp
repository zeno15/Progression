#ifndef INCLUDED_DRILLER_ELEMENTS_BASE_ELEMENT_HPP_
#define INCLUDED_DRILLER_ELEMENTS_BASE_ELEMENT_HPP_

#include <Graphics/Renderable.hpp>

////////////////////////////////////////////////////////////
///
///	\namespace Driller
///
////////////////////////////////////////////////////////////
namespace Driller {
	////////////////////////////////////////////////////////////
	///
	///	\brief	Base class for non entity elements
	///
	////////////////////////////////////////////////////////////
	class BaseElement {
	public:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Constructor
		///
		////////////////////////////////////////////////////////////
		BaseElement(void);
		////////////////////////////////////////////////////////////
		///
		///	\brief	Destructor
		///
		////////////////////////////////////////////////////////////
		virtual ~BaseElement(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Updates the scene 
		///
		///	\param	The elapsed time for the update
		///
		////////////////////////////////////////////////////////////
		virtual void update(float _delta) {};
		////////////////////////////////////////////////////////////
		///
		///	\brief	Handles an event for the scene
		///
		///	\param	The event to handle
		///
		///	\return	Whether the event was handled or not
		///
		////////////////////////////////////////////////////////////
		virtual bool handleEvent(const System::Event& _event) { return false; }
		////////////////////////////////////////////////////////////
		///
		///	\brief	Renders the scene
		///
		///	\param	The window to draw on
		///
		///	\param	The states to draw with
		///
		////////////////////////////////////////////////////////////
		virtual void render(const Window::Window& _window, Graphics::RenderData _renderData) const {};
	};
}

#endif // INCLUDED_DRILLER_ELEMENTS_BASE_ELEMENT_HPP_