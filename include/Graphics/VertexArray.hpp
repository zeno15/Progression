#ifndef INCLUDED_GRAPHICS_VERTEX_ARRAY_HPP_
#define INCLUDED_GRAPHICS_VERTEX_ARRAY_HPP_

#include <Graphics/Vertex.hpp>
#include <Graphics/Renderable.hpp>

#include <vector>

////////////////////////////////////////////////////////////
///
///	\namespace Graphics
///
////////////////////////////////////////////////////////////
namespace Graphics {

	////////////////////////////////////////////////////////////
	///
	///	\brief	Class to represent collection of verticies
	///
	////////////////////////////////////////////////////////////
	class VertexArray : public Renderable {
	public:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Constructor
		///
		////////////////////////////////////////////////////////////
		VertexArray(void);
		////////////////////////////////////////////////////////////
		///
		///	\brief	Constructor
		///
		///	\param	Initialises underlying vertex collection to given size
		///
		////////////////////////////////////////////////////////////
		VertexArray(unsigned int _vertexCount);
		////////////////////////////////////////////////////////////
		///
		///	\brief	Destructor
		///
		////////////////////////////////////////////////////////////
		~VertexArray(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Clears the vertex collection and OpenGL objects
		///
		////////////////////////////////////////////////////////////
		void clear(void);
		////////////////////////////////////////////////////////////
		///
		///	\brief	Creates the OpenGL objects from the vertex collection
		///
		////////////////////////////////////////////////////////////
		void create(void);
		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets the number of vertices
		///
		///	\return The number of vertices
		///
		////////////////////////////////////////////////////////////
		unsigned int getVertexCount(void) const;
		////////////////////////////////////////////////////////////
		///
		///	\brief	Adds a vertex to the underlying collection
		///
		///	\param	The vertex to add
		///
		////////////////////////////////////////////////////////////
		void addVertex(const Vertex& _vertex);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Overload of [] operator
		///
		///	\param	The index into the underlying array to access
		///
		///	\return	The vertex at the given index
		///
		////////////////////////////////////////////////////////////
		inline Vertex& operator[] (unsigned int _index) {
			return m_Verticies[_index];
		}

		////////////////////////////////////////////////////////////
		///
		///	\brief	Renders the VertexArray
		///
		///	\param	The window to render to
		///
		///	\param	The render states to use
		///
		////////////////////////////////////////////////////////////
		void render(const Window::Window& _window, RenderData _RenderData) const override;


	private:
		std::vector<Vertex> m_Verticies;			///<	Collection of verticies
		unsigned int m_VAO;							///<	OpenGL vertex array object handle
		unsigned int m_VBO;							///<	OpenGL vertex buffer object handle
	};
}
#endif // INCLUDED_GRAPHICS_VERTEX_ARRAY_HPP_