#ifndef INCLUDED_GRAPHICS_FONT_HPP_
#define INCLUDED_GRAPHICS_FONT_HPP_

#include <string>

#include <ft2build.h>
#include FT_FREETYPE_H

#include <Graphics/Glyph.hpp>
#include <Graphics/Image.hpp>
#include <Graphics/Texture.hpp>

////////////////////////////////////////////////////////////
///
///	\namespace	Graphics
///
////////////////////////////////////////////////////////////
namespace Graphics {
	////////////////////////////////////////////////////////////
	///
	///	\brief	Class to encapsulate a font and its generated texture
	///
	////////////////////////////////////////////////////////////
	class Font {
	public:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Constructor
		///	
		////////////////////////////////////////////////////////////
		Font(void);
		////////////////////////////////////////////////////////////
		///
		///	\brief	Destructor
		///	
		////////////////////////////////////////////////////////////
		~Font(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Loads a font from a file
		///
		///	\param	The filename of the font
		///
		///	\param	The size of the font
		///
		///	\return Whether the font was loaded successfully
		///
		////////////////////////////////////////////////////////////
		bool loadFromFile(const std::string& _filename, unsigned int _fontSize);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets character vertex data
		///
		///	\param	The character
		///
		///	\param	The current pen position
		///
		///	\return	Vertex data for the given character
		///
		////////////////////////////////////////////////////////////
		std::vector<float> getVertexData(int _character, const System::Vector2f& _penPosition);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets the current atlas image
		///
		///	\return	The image atlas
		///
		////////////////////////////////////////////////////////////
		Image& getAtlas(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets the current atlas texture
		///
		///	\return The texture atlas
		///
		////////////////////////////////////////////////////////////
		Texture& getTextureAtlas(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Preloads the atlas 
		///
		///	\param	The characters to load the atlas with
		///
		////////////////////////////////////////////////////////////
		void preloadAtlas(const std::string& _text);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Returns the glyph index for a character
		///
		///	\param	The character value
		///
		///	\return	The freetype glyph index
		///
		////////////////////////////////////////////////////////////
		FT_UInt getGlyphIndex(int _character);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets the glyph associated with the glyph index
		///
		///	\param	The glyph index
		///
		///	\return	The glyph
		///
		////////////////////////////////////////////////////////////
		FT_GlyphSlot getGlyph(FT_UInt _glyphIndex);

		////////////////////////////////////////////////////////////
		///
		///	\brief
		///
		////////////////////////////////////////////////////////////
		bool addGlyphToAtlas(int _character, Image& _atlas);

		////////////////////////////////////////////////////////////
		///
		///	\brief
		///
		////////////////////////////////////////////////////////////
		Glyph getGlyph(int _character);
		////////////////////////////////////////////////////////////
		///
		///	\brief
		///
		////////////////////////////////////////////////////////////
		void updateTextureIfNeeded(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief
		///
		////////////////////////////////////////////////////////////
		FT_Vector getKerning(int _previous, int _current);

	private:
		FT_Library				m_Library;							///<	The freetype library handle
		FT_Face					m_Face;								///<	The freetype font face
		Image					m_AtlasImage;						///<	The font atlas image
		Texture					m_AtlasTexture;						///<	The font atlas texture
		bool					m_AtlasTextureNeedsUpdate;			///<	Whether the atlas texture needs updating
		unsigned int			m_CurrentX;							///<	The current x position on the atlas
		unsigned int			m_CurrentY;							///<	The current y position on the atlas
		unsigned int			m_NextY;							///<	The next y position on the atlas
		std::vector<Glyph>		m_Glyphs;							///<	The glyphs currently in the atlas
	};
}

#endif // INCLUDED_GRAPHICS_FONT_HPP_