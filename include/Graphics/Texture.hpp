#ifndef INCLUDED_GRAPHICS_TEXTURE_HPP_
#define INCLUDED_GRAPHICS_TEXTURE_HPP_

#include <Graphics/Image.hpp>

#include <string>
#include <vector>

////////////////////////////////////////////////////////////
///
///	\namespace	Graphics
///
////////////////////////////////////////////////////////////
namespace Graphics {
	////////////////////////////////////////////////////////////
	///
	///	\brief	Class to represent a renderable texture
	///
	////////////////////////////////////////////////////////////
	class Texture {
	public:
		////////////////////////////////////////////////////////////
		///
		///
		///
		////////////////////////////////////////////////////////////
		enum TextureWrap {
			CLAMP,				///<	
			REPEAT,				///<	
			MIRRORED_REPEAT		///<	
		};

		////////////////////////////////////////////////////////////
		///
		///
		///
		////////////////////////////////////////////////////////////
		Texture(void);
		////////////////////////////////////////////////////////////
		///
		///
		///
		////////////////////////////////////////////////////////////
		~Texture(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Loads a texture from a file
		///
		///	\param	The filename of the texture
		///
		///	\return Whether the texture was loaded successfully
		///
		////////////////////////////////////////////////////////////
		bool loadFromFile(const std::string& _filename);
		////////////////////////////////////////////////////////////
		///
		///
		///
		////////////////////////////////////////////////////////////
		bool loadFromImage(const Image& _image);

		////////////////////////////////////////////////////////////
		///
		///
		///
		////////////////////////////////////////////////////////////
		void bind(void) const;
		////////////////////////////////////////////////////////////
		///
		///
		///
		////////////////////////////////////////////////////////////
		static void unbind(void);

		////////////////////////////////////////////////////////////
		///
		///
		///
		////////////////////////////////////////////////////////////
		System::Vector2<unsigned int> getSize(void) const;

		////////////////////////////////////////////////////////////
		///
		///
		///
		////////////////////////////////////////////////////////////
		void setWrapMode(TextureWrap _xAxis, TextureWrap _yAxis);


	private:
		unsigned int 					m_TextureHandle;		///<	

		std::vector<uint8_t> 			m_PixelData;			///<	

		System::Vector2<unsigned int>	m_Size;					///<	

		TextureWrap						m_XAxisWrap;			///<	
		TextureWrap						m_YAxisWrap;			///<	
	};
}


#endif // INCLUDED_GRAPHICS_TEXTURE_HPP_