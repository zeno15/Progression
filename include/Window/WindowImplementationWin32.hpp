#ifndef INCLUDED_WINDOW_WINDOW_IMPLEMENTATION_WIN32_HPP
#define INCLUDED_WINDOW_WINDOW_IMPLEMENTATION_WIN32_HPP

#include <Windows.h>

#include <Window/VideoMode.hpp>

#include <System/Event.hpp>
#include <System/Vector2.hpp>

#include <vector>

////////////////////////////////////////////////////////////
///
///	\namespace Window
///
////////////////////////////////////////////////////////////
namespace Window {

	////////////////////////////////////////////////////////////
	///
	///	\brief	Win32 implementation of a window
	///
	////////////////////////////////////////////////////////////
	class WindowImplementationWin32 {
	public:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Creates a window
		///
		///	\param	The video mode to make the window with
		///
		///	\param	The title for the window
		///
		///	\param	The window style
		///
		///	\return	Whether the window was created successfully or not
		///
		////////////////////////////////////////////////////////////
		bool create(const VideoMode& _videoMode, const std::string& _title, uint32_t _style);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Closes the window
		///
		////////////////////////////////////////////////////////////
		void close(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets whether the window is open
		///
		///	\return	Whether the window is open or not
		///
		////////////////////////////////////////////////////////////
		bool isOpen(void) const;

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets the position of the window
		///
		///	\return	The position of the window
		///
		////////////////////////////////////////////////////////////
		System::Vector2i getPosition(void) const;

		////////////////////////////////////////////////////////////
		///
		///	\brief	Sets the position of the window
		///
		///	\param	The new position of the window
		///
		////////////////////////////////////////////////////////////
		void setPosition(const System::Vector2i& _position);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets the size of the window
		///
		///	\return	The size of the window
		///
		////////////////////////////////////////////////////////////
		System::Vector2u getSize(void) const;

		////////////////////////////////////////////////////////////
		///
		///	\brief	Sets the size of the window
		///
		///	\param	The size of the window
		///
		////////////////////////////////////////////////////////////
		void setSize(const System::Vector2u& _size);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Updates the buffer to display the window
		///
		////////////////////////////////////////////////////////////
		void display(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets the Win32 handle of the window
		///
		///	\return	The Win32 handle
		///
		////////////////////////////////////////////////////////////
		HWND getHandle(void) const;

		////////////////////////////////////////////////////////////
		///
		///	\brief	Returns whether or not there is an event in the queue
		///
		///	\param	Event that is populated if there is one in the queue
		///
		///	\param	Whether to block waiting for events
		///
		///	\return	Whether there was an event waiting
		///
		////////////////////////////////////////////////////////////
		bool pollEvent(System::Event& _event, bool _blocking = false);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Pushes an event onto the queue
		///
		///	\param	The event to be added to the queue
		///
		////////////////////////////////////////////////////////////
		void pushEvent(const System::Event& _event);

		////////////////////////////////////////////////////////////
		//
		//	Sets whether repeated key input is used
		//
		////////////////////////////////////////////////////////////
		void setRepeatedKeys(bool _repeat);

		////////////////////////////////////////////////////////////
		//
		//	Sets the title of the window
		//
		////////////////////////////////////////////////////////////
		void setTitle(const std::string& _title);

		////////////////////////////////////////////////////////////
		//
		//	Gets the current title of the window
		//
		////////////////////////////////////////////////////////////
		std::string getTitle(void) const;

	private:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Callback for Windows event handling
		///
		////////////////////////////////////////////////////////////
		static LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

		////////////////////////////////////////////////////////////
		//
		//	Custom function used to handle all system events
		//
		////////////////////////////////////////////////////////////
		void processEvent(UINT, WPARAM, LPARAM);

		////////////////////////////////////////////////////////////
		//
		//	Checks for incoming events
		//
		////////////////////////////////////////////////////////////
		void processWaitingEvents(void);

	private:
		bool								m_Running;					///<	Whether the window is running
		bool								m_RepeatedKeys;				///<	Whether repeated key input is being used
		bool								m_ExitSizeChange;			///<	Allows window resize events to be thrown only when resizing is finished
		std::string							m_Title;					///<	Title of the window
		HWND								m_Handle;					///<	Window handle
		System::Vector2i					m_Position;					///<	Position of the window
		System::Vector2i					m_Size;						///<	Size of the window
		std::vector<System::Event>			m_EventQueue;				///<	Queue of unprocessed events
	};

}

#endif // INCLUDED_WINDOW_WINDOW_IMPLEMENTATION_WIN32_HPP