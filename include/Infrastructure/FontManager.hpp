#ifndef INCLUDED_INFRASTRUCTURE_FONT_MANAGER_HPP_
#define INCLUDED_INFRASTRUCTURE_FONT_MANAGER_HPP_

#include <Infrastructure/Manager.hpp>

#include <Graphics/Font.hpp>

#include <map>

////////////////////////////////////////////////////////////
///
///	\namespace	Infrastructure
///
////////////////////////////////////////////////////////////
namespace Infrastructure {

	////////////////////////////////////////////////////////////
	///
	///	\brief	Class to manager fonts
	///
	////////////////////////////////////////////////////////////
	class FontManager : public Manager {
	public:
		friend class InstanceCollection;

		const static std::string Name;		///<	The name of the manager

		////////////////////////////////////////////////////////////
		///
		///	\brief	Adds a font to the manager
		///
		///	\param	The filename of the font to add
		///
		///	\param	The name of the font
		///
		////////////////////////////////////////////////////////////
		void addFont(const std::string& _filename, const std::string& _fontName);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Gets a font
		///
		///	\param	The name of the font
		///
		///	\return	The font
		///
		////////////////////////////////////////////////////////////
		Graphics::Font& getFont(const std::string& _fontName);

	private:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Constructor
		///
		////////////////////////////////////////////////////////////
		FontManager();
		////////////////////////////////////////////////////////////
		///
		///	\brief	Destructor
		///
		////////////////////////////////////////////////////////////
		~FontManager();

		std::map<std::string, Graphics::Font *> m_Fonts;		///<	Font name map
	};
}

#endif // INCLUDED_INFRASTRUCTURE_FONT_MANAGER_HPP_