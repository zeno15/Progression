#ifndef INCLUDED_TOWER_SCENES_TOWER_GAME_SCENE_HPP_
#define INCLUDED_TOWER_SCENES_TOWER_GAME_SCENE_HPP_

#include <Infrastructure/Scene.hpp>

#include <Graphics/Text.hpp>


////////////////////////////////////////////////////////////
///
///	\namespace Tower
///
////////////////////////////////////////////////////////////
namespace Tower {
	////////////////////////////////////////////////////////////
	///
	///	\brief	Main Tower gameplay scene
	///
	////////////////////////////////////////////////////////////
	class TowerGameScene : public Infrastructure::Scene {
	public:
		////////////////////////////////////////////////////////////
		///
		///	\brief	Constructor
		///	
		////////////////////////////////////////////////////////////
		TowerGameScene(void);
		////////////////////////////////////////////////////////////
		///
		///	\brief	Destructor
		///	
		////////////////////////////////////////////////////////////
		~TowerGameScene(void);

		////////////////////////////////////////////////////////////
		///
		///	\brief	Updates the scene 
		///
		///	\param	The elapsed time for the update
		///
		////////////////////////////////////////////////////////////
		void update(float _delta) override;
		////////////////////////////////////////////////////////////
		///
		///	\brief	Handles an event for the scene
		///
		///	\param	The event to handle
		///
		///	\return	Whether the event was handled or not
		///
		////////////////////////////////////////////////////////////
		bool handleEvent(const System::Event& _event) override;
		////////////////////////////////////////////////////////////
		///
		///	\brief	Renders the scene
		///
		///	\param	The window to draw on
		///
		///	\param	The states to draw with
		///
		////////////////////////////////////////////////////////////
		void render(const Window::Window& _window, Graphics::RenderData _renderData) const override;

	private:
	};
}

#endif // INCLUDED_TOWER_SCENES_TOWER_GAME_SCENE_HPP_